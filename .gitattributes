import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Crear la matriz de correlación con los valores de Spearman extraídos de la tabla proporcionada
data = {
    "Peso al nacer": [1.000, 0.786, 0.867, 0.955, 0.120],
    "Diámetro biparietal (mm)": [0.786, 1.000, 0.708, 0.771, 0.049],
    "Diámetro abdominal (mm)": [0.867, 0.708, 1.000, 0.838, 0.092],
    "Semanas de gestación": [0.955, 0.771, 0.838, 1.000, 0.108],
    "Hora del nacimiento": [0.120, 0.049, 0.092, 0.108, 1.000]
}

# Convertir a DataFrame y ajustar índices
variables = [
    "Peso al nacer",
    "Diámetro biparietal (mm)",
    "Diámetro abdominal (mm)",
    "Semanas de gestación",
    "Hora del nacimiento"
]

df_corr = pd.DataFrame(data, index=variables, columns=variables)

# Crear el heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(df_corr, annot=True, fmt=".3f", cmap="YlGnBu", square=True, cbar_kws={'label': 'ρ de Spearman'})
plt.title("Matriz de calor de correlaciones (Spearman)")
plt.xticks(rotation=45, ha='right')
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()

# Matrices de confusión LDA
# Grupo de entrenamiento

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Matriz de confusión (datos con presión arterial incluida - original)
conf_matrix = pd.DataFrame(
    [[299, 77],
     [54, 140]],
    index=["No diabetes (real)", "Diabetes (real)"],
    columns=["No diabetes (predicho)", "Diabetes (predicho)"]
)

# Crear el gráfico de matriz de confusión
plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues")
plt.title("Matriz de confusión del análisis discriminante (grupo entrenamiento)")
plt.ylabel("Valor real")
plt.xlabel("Valor predicho")
plt.tight_layout()
plt.show()


# Grupo de validación

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Matriz de confusión del grupo de validación (correcta)
conf_matrix = np.array([[91, 33],
                        [24, 50]])

# Crear el gráfico de matriz de calor
plt.figure(figsize=(5, 4))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False,
            xticklabels=['No diabetes', 'Diabetes'],
            yticklabels=['No diabetes', 'Diabetes'])
plt.xlabel('Predicción')
plt.ylabel('Real')
plt.title('Matriz de confusión - Grupo de validación (LDA)')
plt.tight_layout()
plt.show()

# Grafico de barras

import matplotlib.pyplot as plt
import numpy as np

# Variables predictoras (coeficientes simulados para ilustración)
variables = ['Diámetro biparietal', 'Diámetro abdominal', 'Semanas de gestación', 'Tabaquismo materno']
coefs = [16.242, 9.610, 147.485, -441.435]

# Crear gráfico de barras
fig, ax = plt.subplots()
bars = ax.bar(variables, coefs)

# Añadir etiquetas
ax.set_ylabel('Coeficiente no estandarizado (B)')
ax.set_title('Contribución de cada variable al peso al nacer en el modelo de regresión lineal múltiple')
ax.axhline(0, color='black', linewidth=0.8)  # Línea horizontal en 0
plt.xticks(rotation=45)
plt.tight_layout()

plt.show()

# Matriz de confusión
conf_matrix = pd.DataFrame(
    [[338, 38],
     [81, 113]],
    index=["Real: No diabetes", "Real: Diabetes"],
    columns=["Predicho: No diabetes", "Predicho: Diabetes"]
)

# Crear la matriz de calor
plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues")
plt.title("Matriz de confusión - Regresión logística final")
plt.ylabel("Valor real")
plt.xlabel("Valor predicho")
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd

# Valores de la matriz de confusión
conf_matrix = np.array([[7, 369],
                        [0, 194]])

# Etiquetas
labels = ["No diabetes", "Diabetes"]
df_cm = pd.DataFrame(conf_matrix, index=labels, columns=labels)

# Crear matriz de calor
plt.figure(figsize=(6, 4))
sns.heatmap(df_cm, annot=True, fmt="d", cmap="Blues", cbar=False)
plt.title("Matriz de confusión\n(umbral = 0.0112758)")
plt.xlabel("Pronosticado")
plt.ylabel("Observado")
plt.tight_layout()
plt.show()


# Crear gráfico de barras con los coeficientes estandarizados
coef_data = {
    'Variable': [
        'Glucosa plasmática en ayunas',
        'Índice de masa corporal',
        'Nº embarazos previos',
        'Función genética de diabetes'
    ],
    'Coeficiente estandarizado': [0.750, 0.393, 0.369, 0.253]
}

df_coef = pd.DataFrame(coef_data)

# Gráfico
plt.figure(figsize=(8, 5))
sns.barplot(x='Coeficiente estandarizado', y='Variable', data=df_coef)
plt.title("Importancia relativa de las variables en el análisis discriminante")
plt.xlabel("Coeficiente estandarizado")
plt.ylabel("Variable")
plt.tight_layout()
plt.show()
